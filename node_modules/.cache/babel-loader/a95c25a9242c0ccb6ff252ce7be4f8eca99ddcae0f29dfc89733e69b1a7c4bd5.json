{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_canvas_comp = _resolveComponent(\"canvas-comp\");\n  return _openBlock(), _createBlock(_component_canvas_comp, {\n    bg: $props.bg,\n    canvas: $props.canvas,\n    \"global-composite-operation\": \"source-over\",\n    onCanvasInited: $options.canvasInited,\n    onCanvasResize: $options.canvasResize,\n    onCanvasMouseDown: $options.canvasMouseDown\n  }, null, 8 /* PROPS */, [\"bg\", \"canvas\", \"onCanvasInited\", \"onCanvasResize\", \"onCanvasMouseDown\"]);\n}","map":{"version":3,"names":["_createBlock","_component_canvas_comp","bg","$props","canvas","onCanvasInited","$options","canvasInited","onCanvasResize","canvasResize","onCanvasMouseDown","canvasMouseDown"],"sources":["/home/arwin/Desktop/code/dashnote/dashnote-website/node_modules/particles-bg-vue/src/particles-bg/particles/ThickParticles.vue"],"sourcesContent":["<template>\n  <canvas-comp\n    :bg=\"bg\"\n    :canvas=\"canvas\"\n    global-composite-operation=\"source-over\"\n    v-on:canvasInited=\"canvasInited\"\n    v-on:canvasResize=\"canvasResize\"\n    v-on:canvasMouseDown=\"canvasMouseDown\"\n  />\n</template>\n\n<script>\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport { getColor } from \"../utils/Color\";\n\nexport default {\n  name: \"ThickParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      this.canvasDom = canvas;\n      this.createProton(canvas);\n      RAFManager.add(this.renderProton);\n      if (this.color) {\n        canvas.style.backgroundColor = this.color;\n      }\n    },\n    canvasResize({ width, height }) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.proton = new Proton();\n\n      const emitter = new Proton.Emitter();\n      emitter.damping = 0.008;\n      emitter.rate = new Proton.Rate(this.num ? this.num : 150);\n\n      // Initialize\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(8));\n      emitter.addInitialize(\n        new Proton.V(\n          new Proton.Span(0.1, 0.5),\n          new Proton.Span(0, 360),\n          \"polar\"\n        )\n      );\n      emitter.addInitialize(\n        new Proton.Position(\n          new Proton.CircleZone(canvas.width / 2, canvas.height / 2, 100)\n        )\n      );\n\n      // Behaviour\n      const crossZoneBehaviour = new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"cross\"\n      );\n      emitter.addBehaviour(crossZoneBehaviour);\n      this.repulsion = new Proton.Repulsion(\n        {\n          x: canvas.width / 2,\n          y: canvas.height / 2 - 100\n        },\n        3,\n        300\n      );\n\n      this.attraction = new Proton.Attraction(\n        {\n          x: canvas.width / 2,\n          y: canvas.height / 2\n        },\n        3,\n        200\n      );\n      emitter.addBehaviour(this.attraction, this.repulsion);\n      emitter.addBehaviour(new Proton.Color(\"random\"));\n      emitter.addBehaviour(new Proton.RandomDrift(20, 15, 0.15));\n\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas));\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    },\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = () => {\n        this.hue += 1;\n        context.fillStyle = getColor(this.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        particle.data.begin = Proton.MathUtil.randomAToB(1, 120);\n        particle.data.tha = Proton.MathUtil.randomAToB(0, Math.PI * 2);\n      };\n\n      renderer.onParticleUpdate = particle => {\n        const hue = particle.data.begin + this.hue;\n        particle.color = this.colorTemplate.replace(\"hue\", hue % 360);\n\n        const ratio = 3 / 4;\n        const radius =\n          particle.radius *\n            (1 - ratio) *\n            Math.cos((particle.data.tha += 0.01)) +\n          particle.radius * ratio;\n\n        context.beginPath();\n        context.fillStyle = particle.color;\n        context.arc(particle.p.x, particle.p.y, radius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fill();\n      };\n\n      return renderer;\n    },\n    renderProton() {\n      const canvas = this.canvasDom;\n      this.proton.update();\n      if (this.index % 200 === 0) {\n        this.attraction.targetPosition.x = Math.random() * canvas.width;\n        this.attraction.targetPosition.y = Math.random() * canvas.height;\n\n        this.repulsion.targetPosition.x = Math.random() * canvas.width;\n        this.repulsion.targetPosition.y = Math.random() * canvas.height;\n      }\n\n      this.index++;\n    }\n  },\n  created() {\n    this.hue = 0;\n    this.index = 0;\n    this.colorTemplate = `hsla(hue,80%,50%, 0.75)`;\n    this.renderProton = this.renderProton.bind(this);\n  },\n  beforeDestroy() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n</script>\n"],"mappings":";;;uBACEA,YAAA,CAOEC,sBAAA;IANCC,EAAE,EAAEC,MAAA,CAAAD,EAAE;IACNE,MAAM,EAAED,MAAA,CAAAC,MAAM;IACf,4BAA0B,EAAC,aAAa;IACnCC,cAAY,EAAEC,QAAA,CAAAC,YAAY;IAC1BC,cAAY,EAAEF,QAAA,CAAAG,YAAY;IAC1BC,iBAAe,EAAEJ,QAAA,CAAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}