{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ParticlesBg } from 'particles-bg-vue';\nimport VueMarkdown from 'vue-markdown-render';\nexport default {\n  name: 'ReleasesPage',\n  components: {\n    ParticlesBg,\n    VueMarkdown\n  },\n  data() {\n    return {\n      releases: [] // Store releases fetched from GitHub\n    };\n  },\n\n  mounted() {\n    this.fetchReleases();\n  },\n  methods: {\n    async fetchReleases() {\n      try {\n        // Fetch releases from GitHub API\n        const response = await fetch('https://api.github.com/repos/Arwindpianist/Dashnote/releases');\n        const releases = await response.json();\n\n        // Update releases data\n        this.releases = releases;\n      } catch (error) {\n        console.error('Error fetching releases:', error);\n      }\n    },\n    downloadRelease(assets) {\n      console.log('Downloading release:', assets);\n      // TODO: Implement download logic\n    },\n\n    scrollToReleases() {\n      this.$refs.releasesSection.scrollIntoView({\n        behavior: 'smooth'\n      });\n    },\n    navigateToReleases() {\n      this.$router.push({\n        name: 'releases'\n      });\n    }\n  }\n};","map":{"version":3,"names":["ParticlesBg","VueMarkdown","name","components","data","releases","mounted","fetchReleases","methods","response","fetch","json","error","console","downloadRelease","assets","log","scrollToReleases","$refs","releasesSection","scrollIntoView","behavior","navigateToReleases","$router","push"],"sources":["/home/arwin/Desktop/code/dashnote/dashnote-website/src/components/ReleasesPage.vue"],"sourcesContent":["<template>\n    <section class=\"releases\" ref=\"releasesSection\">\n        <div class=\"releases-container\">\n            <div class=\"release-cont\">\n                <h1>Latest Releases</h1>\n                <div v-for=\"release in releases\" :key=\"release.id\" class=\"release-item\">\n                    <div class=\"release-info\">\n                        <h2>{{ release.name }}</h2>\n                        <VueMarkdown class=\"text\" :source=\"release.body\" />\n                    </div>                \n                </div>\n            </div>\n            <div class=\"download-icon\">\n                <!-- Replace the icon URL with your preferred download icon -->\n                <img src=\"../assets/logo.png\" alt=\"Download Icon\" @click=\"downloadRelease(release.assets)\" />\n            </div>\n        </div>\n        <div class=\"bg\">\n            <ParticlesBg type=\"lines\" num=\"100\" />\n        </div>\n    </section>\n</template>\n\n<script>\n\nimport { ParticlesBg } from 'particles-bg-vue';\nimport VueMarkdown from 'vue-markdown-render';\n\nexport default {\n    name: 'ReleasesPage',\n    components: {\n        ParticlesBg,\n        VueMarkdown,\n    },\n    data() {\n        return {\n            releases: [], // Store releases fetched from GitHub\n        };\n    },\n    mounted() {\n        this.fetchReleases();\n    },\n    methods: {\n        async fetchReleases() {\n            try {\n                // Fetch releases from GitHub API\n                const response = await fetch('https://api.github.com/repos/Arwindpianist/Dashnote/releases');\n                const releases = await response.json();\n\n                // Update releases data\n                this.releases = releases;\n            } catch (error) {\n                console.error('Error fetching releases:', error);\n            }\n        },\n        downloadRelease(assets) {\n            console.log('Downloading release:', assets);\n            // TODO: Implement download logic\n            \n        },\n        scrollToReleases() {\n            this.$refs.releasesSection.scrollIntoView({ behavior: 'smooth' });\n        },\n        navigateToReleases() {\n            this.$router.push({ name : 'releases' });\n        },\n    },\n};\n</script>\n\n<style scoped>\n.releases {\n    padding: 50px 0;\n    scroll-snap-align: start;\n}\n\n.releases-container {\n    display: flex;\n    flex-direction: row;\n    max-width: 800px;\n    margin: 0 auto;\n    align-items: center;\n}\n\nh1 {\n    color: #1F538D;\n}\n\n.release-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 20px;\n    margin-bottom: 20px;\n    scroll-snap-align: start;\n}\n\n.release-info {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    text-align: justify;\n}\n\n.release-info h2 {\n    text-align: left;\n}\n\nh2 {\n    color: #1F538D;\n}\n\n.text {\n    margin-top: 10px;\n    line-height: 3rem;\n}\n\n.download-icon img {\n    cursor: pointer;\n}\n\n.bg {\n    z-index: -1;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100vh;\n    filter: blur(0.2rem) brightness(0.5);\n}\n</style>\n"],"mappings":";AAyBA,SAASA,WAAU,QAAS,kBAAkB;AAC9C,OAAOC,WAAU,MAAO,qBAAqB;AAE7C,eAAe;EACXC,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAE;IACRH,WAAW;IACXC;EACJ,CAAC;EACDG,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE,CAAE;IAClB,CAAC;EACL,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,aAAaA,CAAA,EAAG;MAClB,IAAI;QACA;QACA,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,8DAA8D,CAAC;QAC5F,MAAML,QAAO,GAAI,MAAMI,QAAQ,CAACE,IAAI,CAAC,CAAC;;QAEtC;QACA,IAAI,CAACN,QAAO,GAAIA,QAAQ;MAC5B,EAAE,OAAOO,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IACDE,eAAeA,CAACC,MAAM,EAAE;MACpBF,OAAO,CAACG,GAAG,CAAC,sBAAsB,EAAED,MAAM,CAAC;MAC3C;IAEJ,CAAC;;IACDE,gBAAgBA,CAAA,EAAG;MACf,IAAI,CAACC,KAAK,CAACC,eAAe,CAACC,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACrE,CAAC;IACDC,kBAAkBA,CAAA,EAAG;MACjB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEtB,IAAG,EAAI;MAAW,CAAC,CAAC;IAC5C;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}