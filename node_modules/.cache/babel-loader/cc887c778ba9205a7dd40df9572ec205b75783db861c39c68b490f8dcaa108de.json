{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(_ctx.style),\n    ref: \"animContainer\"\n  }, null, 4 /* STYLE */);\n}","map":{"version":3,"names":["_createElementBlock","style","_normalizeStyle","_ctx","ref"],"sources":["/home/arwin/Desktop/code/dashnote/dashnote-website/node_modules/vue-lottie-player/src/vue-lottie-player.vue"],"sourcesContent":["<script>\r\nimport lottie from \"lottie-web\";\r\n\r\nexport default {\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      default: () => \"lottie-\" + Math.random()\r\n    },\r\n    width: {\r\n      type: [String, Number],\r\n      default: () => \"200px\"\r\n    },\r\n    height: {\r\n      type: [String, Number],\r\n      default: () => \"200px\"\r\n    },\r\n    background: {\r\n      type: String,\r\n      default: \"transparent\"\r\n    },\r\n\r\n    loop: {\r\n      type: [Boolean, Number],\r\n      default: () => false\r\n    },\r\n    autoplay: {\r\n      type: Boolean,\r\n      default: () => true\r\n    },\r\n    renderer: {\r\n      type: String,\r\n      default: () => \"svg\"\r\n    },\r\n    path: {\r\n      type: String,\r\n      default: () => null\r\n    },\r\n    animationData: {\r\n      type: Object,\r\n      default: () => null\r\n    }\r\n  },\r\n\r\n  data: vm => ({\r\n    style: {\r\n      width: vm.getSize(vm.width),\r\n      height: vm.getSize(vm.height),\r\n      background: vm.background\r\n    }\r\n  }),\r\n\r\n  mounted() {\r\n    this.loadAnimation();\r\n  },\r\n\r\n  methods: {\r\n    getSize(size) {\r\n      return typeof size == Number ? `${size}px` : size;\r\n    },\r\n\r\n    loadAnimation() {\r\n      let anim = lottie.loadAnimation({\r\n        container: this.$refs.animContainer,\r\n        name: this.name,\r\n        renderer: this.renderer,\r\n        loop: this.loop,\r\n        autoplay: this.autoplay,\r\n        width: this.getSize(this.width),\r\n        height: this.getSize(this.height),\r\n        path: this.path,\r\n        animationData: this.animationData\r\n      });\r\n\r\n      this.$emit(\"animControl\", anim);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div :style=\"style\" ref=\"animContainer\"></div>\r\n</template>\r\n"],"mappings":";;uBAiFEA,mBAAA,CAA8C;IAAxCC,KAAK,EAAAC,eAAA,CAAEC,IAAA,CAAAF,KAAK;IAAEG,GAAG,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}