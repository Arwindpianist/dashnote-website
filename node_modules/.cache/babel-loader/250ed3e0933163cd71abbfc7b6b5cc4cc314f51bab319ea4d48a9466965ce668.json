{"ast":null,"code":"import lottie from \"lottie-web\";\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: () => \"lottie-\" + Math.random()\n    },\n    width: {\n      type: [String, Number],\n      default: () => \"200px\"\n    },\n    height: {\n      type: [String, Number],\n      default: () => \"200px\"\n    },\n    background: {\n      type: String,\n      default: \"transparent\"\n    },\n    loop: {\n      type: [Boolean, Number],\n      default: () => false\n    },\n    autoplay: {\n      type: Boolean,\n      default: () => true\n    },\n    renderer: {\n      type: String,\n      default: () => \"svg\"\n    },\n    path: {\n      type: String,\n      default: () => null\n    },\n    animationData: {\n      type: Object,\n      default: () => null\n    }\n  },\n  data: vm => ({\n    style: {\n      width: vm.getSize(vm.width),\n      height: vm.getSize(vm.height),\n      background: vm.background\n    }\n  }),\n  mounted() {\n    this.loadAnimation();\n  },\n  methods: {\n    getSize(size) {\n      return typeof size == Number ? `${size}px` : size;\n    },\n    loadAnimation() {\n      let anim = lottie.loadAnimation({\n        container: this.$refs.animContainer,\n        name: this.name,\n        renderer: this.renderer,\n        loop: this.loop,\n        autoplay: this.autoplay,\n        width: this.getSize(this.width),\n        height: this.getSize(this.height),\n        path: this.path,\n        animationData: this.animationData\n      });\n      this.$emit(\"animControl\", anim);\n    }\n  }\n};","map":{"version":3,"names":["lottie","props","name","type","String","default","Math","random","width","Number","height","background","loop","Boolean","autoplay","renderer","path","animationData","Object","data","vm","style","getSize","mounted","loadAnimation","methods","size","anim","container","$refs","animContainer","$emit"],"sources":["/home/arwin/Desktop/code/dashnote/dashnote-website/node_modules/vue-lottie-player/src/vue-lottie-player.vue"],"sourcesContent":["<script>\r\nimport lottie from \"lottie-web\";\r\n\r\nexport default {\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      default: () => \"lottie-\" + Math.random()\r\n    },\r\n    width: {\r\n      type: [String, Number],\r\n      default: () => \"200px\"\r\n    },\r\n    height: {\r\n      type: [String, Number],\r\n      default: () => \"200px\"\r\n    },\r\n    background: {\r\n      type: String,\r\n      default: \"transparent\"\r\n    },\r\n\r\n    loop: {\r\n      type: [Boolean, Number],\r\n      default: () => false\r\n    },\r\n    autoplay: {\r\n      type: Boolean,\r\n      default: () => true\r\n    },\r\n    renderer: {\r\n      type: String,\r\n      default: () => \"svg\"\r\n    },\r\n    path: {\r\n      type: String,\r\n      default: () => null\r\n    },\r\n    animationData: {\r\n      type: Object,\r\n      default: () => null\r\n    }\r\n  },\r\n\r\n  data: vm => ({\r\n    style: {\r\n      width: vm.getSize(vm.width),\r\n      height: vm.getSize(vm.height),\r\n      background: vm.background\r\n    }\r\n  }),\r\n\r\n  mounted() {\r\n    this.loadAnimation();\r\n  },\r\n\r\n  methods: {\r\n    getSize(size) {\r\n      return typeof size == Number ? `${size}px` : size;\r\n    },\r\n\r\n    loadAnimation() {\r\n      let anim = lottie.loadAnimation({\r\n        container: this.$refs.animContainer,\r\n        name: this.name,\r\n        renderer: this.renderer,\r\n        loop: this.loop,\r\n        autoplay: this.autoplay,\r\n        width: this.getSize(this.width),\r\n        height: this.getSize(this.height),\r\n        path: this.path,\r\n        animationData: this.animationData\r\n      });\r\n\r\n      this.$emit(\"animControl\", anim);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div :style=\"style\" ref=\"animContainer\"></div>\r\n</template>\r\n"],"mappings":"AACA,OAAOA,MAAK,MAAO,YAAY;AAE/B,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAEA,CAAA,KAAM,SAAQ,GAAIC,IAAI,CAACC,MAAM,CAAC;IACzC,CAAC;IACDC,KAAK,EAAE;MACLL,IAAI,EAAE,CAACC,MAAM,EAAEK,MAAM,CAAC;MACtBJ,OAAO,EAAEA,CAAA,KAAM;IACjB,CAAC;IACDK,MAAM,EAAE;MACNP,IAAI,EAAE,CAACC,MAAM,EAAEK,MAAM,CAAC;MACtBJ,OAAO,EAAEA,CAAA,KAAM;IACjB,CAAC;IACDM,UAAU,EAAE;MACVR,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IAEDO,IAAI,EAAE;MACJT,IAAI,EAAE,CAACU,OAAO,EAAEJ,MAAM,CAAC;MACvBJ,OAAO,EAAEA,CAAA,KAAM;IACjB,CAAC;IACDS,QAAQ,EAAE;MACRX,IAAI,EAAEU,OAAO;MACbR,OAAO,EAAEA,CAAA,KAAM;IACjB,CAAC;IACDU,QAAQ,EAAE;MACRZ,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAEA,CAAA,KAAM;IACjB,CAAC;IACDW,IAAI,EAAE;MACJb,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAEA,CAAA,KAAM;IACjB,CAAC;IACDY,aAAa,EAAE;MACbd,IAAI,EAAEe,MAAM;MACZb,OAAO,EAAEA,CAAA,KAAM;IACjB;EACF,CAAC;EAEDc,IAAI,EAAEC,EAAC,KAAM;IACXC,KAAK,EAAE;MACLb,KAAK,EAAEY,EAAE,CAACE,OAAO,CAACF,EAAE,CAACZ,KAAK,CAAC;MAC3BE,MAAM,EAAEU,EAAE,CAACE,OAAO,CAACF,EAAE,CAACV,MAAM,CAAC;MAC7BC,UAAU,EAAES,EAAE,CAACT;IACjB;EACF,CAAC,CAAC;EAEFY,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EAEDC,OAAO,EAAE;IACPH,OAAOA,CAACI,IAAI,EAAE;MACZ,OAAO,OAAOA,IAAG,IAAKjB,MAAK,GAAK,GAAEiB,IAAK,IAAE,GAAIA,IAAI;IACnD,CAAC;IAEDF,aAAaA,CAAA,EAAG;MACd,IAAIG,IAAG,GAAI3B,MAAM,CAACwB,aAAa,CAAC;QAC9BI,SAAS,EAAE,IAAI,CAACC,KAAK,CAACC,aAAa;QACnC5B,IAAI,EAAE,IAAI,CAACA,IAAI;QACfa,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBH,IAAI,EAAE,IAAI,CAACA,IAAI;QACfE,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBN,KAAK,EAAE,IAAI,CAACc,OAAO,CAAC,IAAI,CAACd,KAAK,CAAC;QAC/BE,MAAM,EAAE,IAAI,CAACY,OAAO,CAAC,IAAI,CAACZ,MAAM,CAAC;QACjCM,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAEF,IAAI,CAACc,KAAK,CAAC,aAAa,EAAEJ,IAAI,CAAC;IACjC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}