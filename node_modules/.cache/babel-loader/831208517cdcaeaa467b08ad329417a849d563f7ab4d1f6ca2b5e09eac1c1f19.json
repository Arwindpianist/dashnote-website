{"ast":null,"code":"import CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nconst COLOR = [\"#f6b93b\", \"#18dcff\", \"#cd84f1\", \"#ED4C67\", \"#ffffff\", \"#b71540\", \"#32ff7e\", \"#ff3838\"];\nexport default {\n  name: \"PolygonParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.createProton(canvas);\n      this.createEmitter({\n        canvas,\n        x: width / 2,\n        y: height / 2,\n        mainEmitter: true,\n        zone: \"bound\"\n      });\n      RAFManager.add(this.renderProton);\n    },\n    canvasResize({\n      width,\n      height\n    }) {\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n    createProton(canvas) {\n      this.proton = new Proton();\n      const renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    },\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CustomRenderer();\n      renderer.onProtonUpdate = () => {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n      renderer.onParticleCreated = particle => {\n        particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n      };\n      renderer.onParticleUpdate = particle => {\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n        context.beginPath();\n        drawPolygon(particle, particle.data.count);\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n      renderer.onParticleDead = particle => {};\n      const drawPolygon = (particle, count) => {\n        if (count >= 7) {\n          context.arc(particle.p.x, particle.p.y, particle.radius, 0, Math.PI * 2, true);\n        } else {\n          const radius = particle.radius;\n          for (let i = 0; i <= count; i++) {\n            let x = particle.p.x + radius * Math.cos(Math.PI / 180 * 360 / count * i);\n            let y = particle.p.y + radius * Math.sin(Math.PI / 180 * 360 / count * i);\n            if (i === 0) context.moveTo(x, y);else context.lineTo(x, y);\n          }\n        }\n      };\n      return renderer;\n    },\n    createEmitter({\n      mainEmitter,\n      canvas,\n      x,\n      y,\n      radius,\n      color = COLOR,\n      zone = \"dead\",\n      once = \"all\",\n      alpha = 0.85,\n      gravity = 3.5\n    }) {\n      const emitter = this.proton.pool.get(Proton.Emitter);\n      if (!emitter.completed) {\n        emitter.rate = new Proton.Rate(this.num ? new Proton.Span(this.num) : new Proton.Span(4, 9), new Proton.Span(1.6, 2.2));\n        const radiusInit = mainEmitter ? new Proton.Radius(10, 110) : new Proton.Radius(3, radius);\n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(radiusInit);\n        emitter.addInitialize(new Proton.Life(3, 6));\n        emitter.addInitialize(new Proton.Velocity(new Proton.Span(4, 6), new Proton.Span(-90, 90), \"polar\"));\n        emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n        emitter.addBehaviour(new Proton.Color(color));\n        emitter.addBehaviour(new Proton.Scale(1, 0.3));\n        emitter.addBehaviour(new Proton.Rotate());\n        emitter.addBehaviour(new Proton.Gravity(gravity));\n        emitter.addBehaviour(this.customDeadBehaviour(canvas));\n        emitter.addBehaviour(new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), zone));\n      }\n      emitter.p.x = x;\n      emitter.p.y = y;\n      if (once === \"once\") emitter.emit(\"once\");else emitter.emit();\n      this.proton.addEmitter(emitter);\n      //this.expireEmitter(emitter);\n    },\n\n    expireEmitter(emitter) {\n      setTimeout(() => {\n        emitter.completed = true;\n        this.proton.pool.expire(emitter);\n        this.proton.removeEmitter(emitter);\n      }, 500);\n    },\n    customDeadBehaviour(canvas) {\n      return {\n        initialize: particle => {\n          particle.data = particle.data || {};\n          particle.data.oldRadius = particle.radius;\n          particle.data.emitterCount = 0;\n        },\n        applyBehaviour: particle => {\n          if (particle.radius < 5) return;\n          if (particle.data.emitterCount >= 2) return;\n          if (particle.radius <= 1 / 3 * particle.data.oldRadius) {\n            particle.data.emitterCount++;\n            this.createEmitter({\n              canvas,\n              x: particle.p.x,\n              y: particle.p.y,\n              radius: particle.radius * (1 / 2),\n              alpha: 0.5,\n              gravity: 5,\n              color: particle.color,\n              once: \"once\"\n            });\n          }\n        }\n      };\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestroy() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};","map":{"version":3,"names":["CanvasComp","Proton","RAFManager","COLOR","name","components","props","canvas","Object","bg","Boolean","color","String","num","Number","config","methods","canvasInited","width","height","createProton","createEmitter","x","y","mainEmitter","zone","add","renderProton","canvasResize","proton","renderers","resize","canvasMouseDown","e","renderer","createRenderer","addRenderer","context","getContext","CustomRenderer","onProtonUpdate","clearRect","onParticleCreated","particle","data","count","MathUtil","randomAToB","onParticleUpdate","save","globalAlpha","alpha","fillStyle","translate","p","rotate","degreeTransform","rotation","beginPath","drawPolygon","closePath","fill","restore","onParticleDead","arc","radius","Math","PI","i","cos","sin","moveTo","lineTo","once","gravity","emitter","pool","get","Emitter","completed","rate","Rate","Span","radiusInit","Radius","addInitialize","Mass","Life","Velocity","addBehaviour","Alpha","Color","Scale","Rotate","Gravity","customDeadBehaviour","CrossZone","RectZone","emit","addEmitter","expireEmitter","setTimeout","expire","removeEmitter","initialize","oldRadius","emitterCount","applyBehaviour","update","beforeDestroy","destroy","remove"],"sources":["/home/arwin/Desktop/code/dashnote/dashnote-website/node_modules/particles-bg-vue/src/particles-bg/particles/PolygonParticles.vue"],"sourcesContent":["<template>\n  <canvas-comp\n    :bg=\"bg\"\n    :canvas=\"canvas\"\n    global-composite-operation=\"xor\"\n    v-on:canvasInited=\"canvasInited\"\n    v-on:canvasResize=\"canvasResize\"\n    v-on:canvasMouseDown=\"canvasMouseDown\"\n  />\n</template>\n\n<script>\nimport CanvasComp from \"./CanvasComp.vue\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default {\n  name: \"PolygonParticles\",\n  components: {\n    CanvasComp\n  },\n  props: {\n    canvas: Object,\n    canvas: Object,\n    bg: Boolean,\n    color: String,\n    num: Number,\n    config: {}\n  },\n  methods: {\n    canvasInited(canvas) {\n      const width = canvas.width;\n      const height = canvas.height;\n      this.createProton(canvas);\n      this.createEmitter({\n        canvas,\n        x: width / 2,\n        y: height / 2,\n        mainEmitter: true,\n        zone: \"bound\"\n      });\n\n      RAFManager.add(this.renderProton);\n    },\n    canvasResize({ width, height }) {\n      this.proton.renderers[0].resize(width, height);\n    },\n    canvasMouseDown(e) {},\n\n    createProton(canvas) {\n      this.proton = new Proton();\n      const renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    },\n\n    createRenderer(canvas) {\n      const context = canvas.getContext(\"2d\");\n      const renderer = new Proton.CustomRenderer();\n      renderer.onProtonUpdate = () => {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = particle => {\n        particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n      };\n\n      renderer.onParticleUpdate = particle => {\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n\n        context.beginPath();\n        drawPolygon(particle, particle.data.count);\n\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      renderer.onParticleDead = particle => {};\n\n      const drawPolygon = (particle, count) => {\n        if (count >= 7) {\n          context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n          );\n        } else {\n          const radius = particle.radius;\n\n          for (let i = 0; i <= count; i++) {\n            let x =\n              particle.p.x +\n              radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n            let y =\n              particle.p.y +\n              radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n            if (i === 0) context.moveTo(x, y);\n            else context.lineTo(x, y);\n          }\n        }\n      };\n\n      return renderer;\n    },\n\n    createEmitter({\n      mainEmitter,\n      canvas,\n      x,\n      y,\n      radius,\n      color = COLOR,\n      zone = \"dead\",\n      once = \"all\",\n      alpha = 0.85,\n      gravity = 3.5\n    }) {\n      const emitter = this.proton.pool.get(Proton.Emitter);\n\n      if (!emitter.completed) {\n        emitter.rate = new Proton.Rate(\n          this.num ? new Proton.Span(this.num) : new Proton.Span(4, 9),\n          new Proton.Span(1.6, 2.2)\n        );\n\n        const radiusInit = mainEmitter\n          ? new Proton.Radius(10, 110)\n          : new Proton.Radius(3, radius);\n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(radiusInit);\n        emitter.addInitialize(new Proton.Life(3, 6));\n        emitter.addInitialize(\n          new Proton.Velocity(\n            new Proton.Span(4, 6),\n            new Proton.Span(-90, 90),\n            \"polar\"\n          )\n        );\n\n        emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n        emitter.addBehaviour(new Proton.Color(color));\n        emitter.addBehaviour(new Proton.Scale(1, 0.3));\n        emitter.addBehaviour(new Proton.Rotate());\n        emitter.addBehaviour(new Proton.Gravity(gravity));\n\n        emitter.addBehaviour(this.customDeadBehaviour(canvas));\n        emitter.addBehaviour(\n          new Proton.CrossZone(\n            new Proton.RectZone(0, 0, canvas.width, canvas.height),\n            zone\n          )\n        );\n      }\n\n      emitter.p.x = x;\n      emitter.p.y = y;\n      if (once === \"once\") emitter.emit(\"once\");\n      else emitter.emit();\n\n      this.proton.addEmitter(emitter);\n      //this.expireEmitter(emitter);\n    },\n\n    expireEmitter(emitter) {\n      setTimeout(() => {\n        emitter.completed = true;\n        this.proton.pool.expire(emitter);\n        this.proton.removeEmitter(emitter);\n      }, 500);\n    },\n\n    customDeadBehaviour(canvas) {\n      return {\n        initialize: particle => {\n          particle.data = particle.data || {};\n          particle.data.oldRadius = particle.radius;\n          particle.data.emitterCount = 0;\n        },\n        applyBehaviour: particle => {\n          if (particle.radius < 5) return;\n          if (particle.data.emitterCount >= 2) return;\n\n          if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n            particle.data.emitterCount++;\n            this.createEmitter({\n              canvas,\n              x: particle.p.x,\n              y: particle.p.y,\n              radius: particle.radius * (1 / 2),\n              alpha: 0.5,\n              gravity: 5,\n              color: particle.color,\n              once: \"once\"\n            });\n          }\n        }\n      };\n    },\n    renderProton() {\n      this.proton && this.proton.update();\n    }\n  },\n  beforeDestroy() {\n    try {\n      this.proton.destroy();\n      RAFManager.remove(this.renderProton);\n    } catch (e) {}\n  }\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}